给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素最多出现两次，返回移除后数组的新长度。

不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。

示例 1 :

给定 nums = [1, 1, 1, 2, 2, 3],

函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3 。

你不需要考虑数组中超出新长度后面的元素。
示例 2 :

给定 nums = [0, 0, 1, 1, 1, 1, 2, 3, 3],

函数应返回新长度 length = 7, 并且原数组的前五个元素被修改为 0, 0, 1, 1, 2, 3, 3 。

你不需要考虑数组中超出新长度后面的元素。

//解题思路
//这道题使用双指针解法，我们定义一个慢指针i与快指针j，每当快指针遇到一个与慢指针不同的数字的时候，
//此时，我们就可以移动慢指针并且改变（删除）排序数组的重复项。但是题目中要求使得每个元素最多出现两次，
//返回移除后数组的新长度。这里我们可以定义一个length计数器，计算每次重复元素的个数，根据i移动后，将剩下的元素改变（删除）即可。

class Solution {
	public int removeDuplicates(int[] nums) 
	{
		int i = 0, j = 0, length = 0;
		int n = nums.length;
		while (i<n && j <n)
		{
			if (nums[i] == nums[j])
			{
				length++;
				j++;
			}
			else
			{
				i = length >= 2 ? i + 2 : i + 1;
				for (int k = i; k<j; k++)
					nums[k] = nums[j];
				length = 0;
			}
		}
		i = length >= 2 ? i + 2 : i + 1;
		return i;

	}
}