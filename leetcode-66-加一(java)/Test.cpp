
给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。

最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。

你可以假设除了整数 0 之外，这个整数不会以零开头。

示例 1:
输入 : [1, 2, 3]
输出 : [1, 2, 4]
解释 : 输入数组表示数字 123。
	  
示例 2 :
输入 : [4, 3, 2, 1]
输出 : [4, 3, 2, 2]
解释 : 输入数组表示数字 4321。

//解题思路
//这道题的思路就是分析碰到数字9该怎么办。如果是末位不为9，末位加一即可，如果消除所有连续的9，全部置0，然后第一个不为9的数字加一
//如果所有的数字都为9，新建一个长度加一的数组，首位置1，其余位全部置0

public int[] plusOne(int[] digits) {
	int len = digits.length;
	// 如果数组末尾的数字不为9，直接加一即可
	if (digits[len - 1] != 9)
	{
		digits[len - 1]++;
	}
	else
	{
		// 数组最后一位是9，需要进位。
		int index = len - 1;
		// 从末尾开始所有连续的数字9需要连续进位，先将它们都置0
		// while循环后的index指向第一个不为9的位置，注意0位置数值暂不考虑
		while (digits[index] == 9 && index > 0)
		{
			digits[index] = 0;
			index--;
		}
		// 如果进位没有涉及到首位，直接将第一个不为的数字加一即可
		if (index != 0)
		{
			digits[index]++;
		}
		else 
		{
			// 能进到这个条件语句中说明除了0位置，其余所有位置都为9
			// 0位置如果不为9，直接加一即可
			if (digits[index] != 9)
			{
				digits[index]++;
			}
			else 
			{
				// 能进到这个条件语句说明整个数组全部都是9
				// 直接新建一个比原数组多一位的数组，然后首位置1，其余所有位置0
				digits = new int[len + 1];
				Arrays.fill(digits, 0);
				digits[0] = 1;
			}
		}
	}
	return digits;
}
